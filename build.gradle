plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
	id 'com.bmuschko.docker-java-application' version '9.4.0'
}

group = 'com.p8labs'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

// 실행 가능한 JAR 생성 설정
bootJar {
	enabled = true

	doLast {
		copy {
			def jarFile = tasks.bootJar.archiveFile.get().asFile
			def jarFilePath = jarFile.path

			from jarFilePath
			into getRootDir().path + "/build/docker/"
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Docker
	// https://mvnrepository.com/artifact/com.bmuschko.docker-remote-api/com.bmuschko.docker-remote-api.gradle.plugin
	implementation 'com.bmuschko.docker-remote-api:com.bmuschko.docker-remote-api.gradle.plugin:9.4.0'
// https://mvnrepository.com/artifact/com.bmuschko.docker-java-application/com.bmuschko.docker-java-application.gradle.plugin
	implementation 'com.bmuschko.docker-java-application:com.bmuschko.docker-java-application.gradle.plugin:9.4.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}



apply from: 'gradle/docker.gradle'


import com.bmuschko.gradle.docker.tasks.image.*

tasks.create('createDockerfile', Dockerfile) {
	def jarFile = tasks.bootJar.archiveFile.get().asFile
	from('openjdk:17-jdk-slim')
	arg("JAR_FILE")
	copyFile(jarFile.getName(), '/config-app.jar')
	runCommand("mkdir -p target/dependency && (cd target/dependency; jar -xf /config-app.jar)")
	entryPoint("java", "-jar", "/config-app.jar")
	exposePort(8071)
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile
	images.add('rnrl1215/p8labs-config:0.0.2')
}

task pushDocker(type: DockerPushImage) {
	dependsOn buildImage  // Docker 이미지 빌드 후 푸시
	images.add("rnrl1215/p8labs-config:0.0.2")
	registryCredentials {
		username = 'rnrl1215'
		password = ''
	}
}